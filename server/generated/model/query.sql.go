// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.0
// source: query.sql

package model

import (
	"context"
	"database/sql"
)

const countContestInfoRow = `-- name: CountContestInfoRow :one
SELECT COUNT(*)
FROM ` + "`" + `contest_info` + "`" + `
`

func (q *Queries) CountContestInfoRow(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, countContestInfoRow)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countRowAsAdmin = `-- name: CountRowAsAdmin :one
SELECT COUNT(*)
FROM ` + "`" + `admins` + "`" + `
WHERE ` + "`" + `trap_id` + "`" + ` = ?
`

func (q *Queries) CountRowAsAdmin(ctx context.Context, trapID string) (int64, error) {
	row := q.db.QueryRowContext(ctx, countRowAsAdmin, trapID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countRowAsRoot = `-- name: CountRowAsRoot :one
SELECT COUNT(*)
FROM ` + "`" + `roots` + "`" + `
WHERE ` + "`" + `trap_id` + "`" + ` = ?
`

func (q *Queries) CountRowAsRoot(ctx context.Context, trapID string) (int64, error) {
	row := q.db.QueryRowContext(ctx, countRowAsRoot, trapID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const deleteAllContestInfo = `-- name: DeleteAllContestInfo :exec
TRUNCATE ` + "`" + `contest_info` + "`" + `
`

func (q *Queries) DeleteAllContestInfo(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteAllContestInfo)
	return err
}

const deleteAllRootUsers = `-- name: DeleteAllRootUsers :exec
TRUNCATE ` + "`" + `roots` + "`" + `
`

func (q *Queries) DeleteAllRootUsers(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteAllRootUsers)
	return err
}

const getContestInfo = `-- name: GetContestInfo :one
SELECT title, description, scheduled_start_time, start_time, end_time, voting_freeze_time
FROM ` + "`" + `contest_info` + "`" + `
LIMIT 1
`

func (q *Queries) GetContestInfo(ctx context.Context) (ContestInfo, error) {
	row := q.db.QueryRowContext(ctx, getContestInfo)
	var i ContestInfo
	err := row.Scan(
		&i.Title,
		&i.Description,
		&i.ScheduledStartTime,
		&i.StartTime,
		&i.EndTime,
		&i.VotingFreezeTime,
	)
	return i, err
}

const insertAdminUser = `-- name: InsertAdminUser :exec
INSERT INTO ` + "`" + `admins` + "`" + ` (` + "`" + `trap_id` + "`" + `)
VALUES (?)
`

func (q *Queries) InsertAdminUser(ctx context.Context, trapID string) error {
	_, err := q.db.ExecContext(ctx, insertAdminUser, trapID)
	return err
}

const insertContestInfo = `-- name: InsertContestInfo :exec
INSERT INTO ` + "`" + `contest_info` + "`" + `
(` + "`" + `title` + "`" + `, ` + "`" + `description` + "`" + `, ` + "`" + `scheduled_start_time` + "`" + `, ` + "`" + `start_time` + "`" + `, ` + "`" + `end_time` + "`" + `, ` + "`" + `voting_freeze_time` + "`" + `)
VALUES (?, ?, ?, ?, ?, ?)
`

type InsertContestInfoParams struct {
	Title              string
	Description        sql.NullString
	ScheduledStartTime sql.NullTime
	StartTime          sql.NullTime
	EndTime            sql.NullTime
	VotingFreezeTime   sql.NullTime
}

func (q *Queries) InsertContestInfo(ctx context.Context, arg InsertContestInfoParams) error {
	_, err := q.db.ExecContext(ctx, insertContestInfo,
		arg.Title,
		arg.Description,
		arg.ScheduledStartTime,
		arg.StartTime,
		arg.EndTime,
		arg.VotingFreezeTime,
	)
	return err
}

const insertRootUser = `-- name: InsertRootUser :exec
INSERT INTO ` + "`" + `roots` + "`" + ` (` + "`" + `trap_id` + "`" + `)
VALUES (?)
`

func (q *Queries) InsertRootUser(ctx context.Context, trapID string) error {
	_, err := q.db.ExecContext(ctx, insertRootUser, trapID)
	return err
}
