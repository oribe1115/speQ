// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ContestInfo defines model for ContestInfo.
type ContestInfo struct {
	Description        *string    `json:"description,omitempty"`
	EndTime            *time.Time `json:"end_time,omitempty"`
	ScheduledStartTime *time.Time `json:"scheduled_start_time,omitempty"`
	StartTime          *time.Time `json:"start_time,omitempty"`
	Title              *string    `json:"title,omitempty"`
	VotingFreezeTime   *time.Time `json:"voting_freeze_time,omitempty"`
}

// ProblemInfo defines model for ProblemInfo.
type ProblemInfo struct {
	Description *string `json:"description,omitempty"`

	// 表示順の指定にも使用
	Id    int    `json:"id"`
	Title string `json:"title"`
}

// ProblemSolvedInfo defines model for ProblemSolvedInfo.
type ProblemSolvedInfo struct {
	ContestantId TraPId `json:"contestantId"`
	ProblemId    int    `json:"problemId"`
}

// ScoreInfo defines model for ScoreInfo.
type ScoreInfo struct {
	ContestantId TraPId  `json:"contestantId"`
	Score        float32 `json:"score"`
}

// UserInfo defines model for UserInfo.
type UserInfo struct {
	IsAdmin bool   `json:"isAdmin"`
	IsRoot  bool   `json:"isRoot"`
	TraPId  TraPId `json:"traPId"`
}

// VoteStatsItem defines model for VoteStatsItem.
type VoteStatsItem struct {
	Contestant *TraPId   `json:"contestant,omitempty"`
	Voters     *[]TraPId `json:"voters,omitempty"`
}

// TraPId defines model for traPId.
type TraPId = string

// PutContestInfoJSONBody defines parameters for PutContestInfo.
type PutContestInfoJSONBody = ContestInfo

// PutProblemsJSONBody defines parameters for PutProblems.
type PutProblemsJSONBody = []ProblemInfo

// UnmarkProblemAsSolvedJSONBody defines parameters for UnmarkProblemAsSolved.
type UnmarkProblemAsSolvedJSONBody = ProblemSolvedInfo

// MarkProblemAsSolvedJSONBody defines parameters for MarkProblemAsSolved.
type MarkProblemAsSolvedJSONBody = ProblemSolvedInfo

// PostScoreJSONBody defines parameters for PostScore.
type PostScoreJSONBody = ScoreInfo

// PutAdminUsersJSONBody defines parameters for PutAdminUsers.
type PutAdminUsersJSONBody = []TraPId

// PutContestantsJSONBody defines parameters for PutContestants.
type PutContestantsJSONBody = []TraPId

// GetContestantsJSONBody defines parameters for GetContestants.
type GetContestantsJSONBody = []TraPId

// PostVoteJSONBody defines parameters for PostVote.
type PostVoteJSONBody = TraPId

// PostVoteTripleJSONBody defines parameters for PostVoteTriple.
type PostVoteTripleJSONBody struct {
	First  TraPId `json:"first"`
	Second TraPId `json:"second"`
	Third  TraPId `json:"third"`
}

// PutContestInfoJSONRequestBody defines body for PutContestInfo for application/json ContentType.
type PutContestInfoJSONRequestBody = PutContestInfoJSONBody

// PutProblemsJSONRequestBody defines body for PutProblems for application/json ContentType.
type PutProblemsJSONRequestBody = PutProblemsJSONBody

// UnmarkProblemAsSolvedJSONRequestBody defines body for UnmarkProblemAsSolved for application/json ContentType.
type UnmarkProblemAsSolvedJSONRequestBody = UnmarkProblemAsSolvedJSONBody

// MarkProblemAsSolvedJSONRequestBody defines body for MarkProblemAsSolved for application/json ContentType.
type MarkProblemAsSolvedJSONRequestBody = MarkProblemAsSolvedJSONBody

// PostScoreJSONRequestBody defines body for PostScore for application/json ContentType.
type PostScoreJSONRequestBody = PostScoreJSONBody

// PutAdminUsersJSONRequestBody defines body for PutAdminUsers for application/json ContentType.
type PutAdminUsersJSONRequestBody = PutAdminUsersJSONBody

// PutContestantsJSONRequestBody defines body for PutContestants for application/json ContentType.
type PutContestantsJSONRequestBody = PutContestantsJSONBody

// GetContestantsJSONRequestBody defines body for GetContestants for application/json ContentType.
type GetContestantsJSONRequestBody = GetContestantsJSONBody

// PostVoteJSONRequestBody defines body for PostVote for application/json ContentType.
type PostVoteJSONRequestBody = PostVoteJSONBody

// PostVoteTripleJSONRequestBody defines body for PostVoteTriple for application/json ContentType.
type PostVoteTripleJSONRequestBody PostVoteTripleJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Put Contest Info
	// (PUT /admin/info)
	PutContestInfo(ctx echo.Context) error
	// Put Problems
	// (PUT /admin/problems)
	PutProblems(ctx echo.Context) error
	// Unmark Problem as Solved
	// (DELETE /admin/problems/solved)
	UnmarkProblemAsSolved(ctx echo.Context) error
	// Mark Problems as Solved
	// (POST /admin/problems/solved)
	MarkProblemAsSolved(ctx echo.Context) error
	// Post New Score
	// (POST /admin/scores)
	PostScore(ctx echo.Context) error
	// Put Admin Users
	// (PUT /admin/users/admin)
	PutAdminUsers(ctx echo.Context) error
	// Put Contestant Users
	// (PUT /admin/users/contestant)
	PutContestants(ctx echo.Context) error
	// Get Contest Info
	// (GET /info)
	GetContestInfo(ctx echo.Context) error
	// Get Admin Users
	// (GET /users/admin)
	GetAdmins(ctx echo.Context) error
	// Get Contestant Users
	// (GET /users/contestant)
	GetContestants(ctx echo.Context) error
	// Get My Information
	// (GET /users/me)
	GetMe(ctx echo.Context) error
	// Get Root Users
	// (GET /users/root)
	GetRootUsers(ctx echo.Context) error
	// Get Current Vote
	// (GET /vote)
	GetVote(ctx echo.Context) error
	// Post New Vote
	// (POST /vote)
	PostVote(ctx echo.Context) error
	// Your GET endpoint
	// (GET /vote/stats)
	GetVoteStats(ctx echo.Context) error

	// (POST /vote/triple)
	PostVoteTriple(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PutContestInfo converts echo context to params.
func (w *ServerInterfaceWrapper) PutContestInfo(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutContestInfo(ctx)
	return err
}

// PutProblems converts echo context to params.
func (w *ServerInterfaceWrapper) PutProblems(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutProblems(ctx)
	return err
}

// UnmarkProblemAsSolved converts echo context to params.
func (w *ServerInterfaceWrapper) UnmarkProblemAsSolved(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UnmarkProblemAsSolved(ctx)
	return err
}

// MarkProblemAsSolved converts echo context to params.
func (w *ServerInterfaceWrapper) MarkProblemAsSolved(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MarkProblemAsSolved(ctx)
	return err
}

// PostScore converts echo context to params.
func (w *ServerInterfaceWrapper) PostScore(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostScore(ctx)
	return err
}

// PutAdminUsers converts echo context to params.
func (w *ServerInterfaceWrapper) PutAdminUsers(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutAdminUsers(ctx)
	return err
}

// PutContestants converts echo context to params.
func (w *ServerInterfaceWrapper) PutContestants(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutContestants(ctx)
	return err
}

// GetContestInfo converts echo context to params.
func (w *ServerInterfaceWrapper) GetContestInfo(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetContestInfo(ctx)
	return err
}

// GetAdmins converts echo context to params.
func (w *ServerInterfaceWrapper) GetAdmins(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAdmins(ctx)
	return err
}

// GetContestants converts echo context to params.
func (w *ServerInterfaceWrapper) GetContestants(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetContestants(ctx)
	return err
}

// GetMe converts echo context to params.
func (w *ServerInterfaceWrapper) GetMe(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetMe(ctx)
	return err
}

// GetRootUsers converts echo context to params.
func (w *ServerInterfaceWrapper) GetRootUsers(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRootUsers(ctx)
	return err
}

// GetVote converts echo context to params.
func (w *ServerInterfaceWrapper) GetVote(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetVote(ctx)
	return err
}

// PostVote converts echo context to params.
func (w *ServerInterfaceWrapper) PostVote(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostVote(ctx)
	return err
}

// GetVoteStats converts echo context to params.
func (w *ServerInterfaceWrapper) GetVoteStats(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetVoteStats(ctx)
	return err
}

// PostVoteTriple converts echo context to params.
func (w *ServerInterfaceWrapper) PostVoteTriple(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostVoteTriple(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.PUT(baseURL+"/admin/info", wrapper.PutContestInfo)
	router.PUT(baseURL+"/admin/problems", wrapper.PutProblems)
	router.DELETE(baseURL+"/admin/problems/solved", wrapper.UnmarkProblemAsSolved)
	router.POST(baseURL+"/admin/problems/solved", wrapper.MarkProblemAsSolved)
	router.POST(baseURL+"/admin/scores", wrapper.PostScore)
	router.PUT(baseURL+"/admin/users/admin", wrapper.PutAdminUsers)
	router.PUT(baseURL+"/admin/users/contestant", wrapper.PutContestants)
	router.GET(baseURL+"/info", wrapper.GetContestInfo)
	router.GET(baseURL+"/users/admin", wrapper.GetAdmins)
	router.GET(baseURL+"/users/contestant", wrapper.GetContestants)
	router.GET(baseURL+"/users/me", wrapper.GetMe)
	router.GET(baseURL+"/users/root", wrapper.GetRootUsers)
	router.GET(baseURL+"/vote", wrapper.GetVote)
	router.POST(baseURL+"/vote", wrapper.PostVote)
	router.GET(baseURL+"/vote/stats", wrapper.GetVoteStats)
	router.POST(baseURL+"/vote/triple", wrapper.PostVoteTriple)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"///5gN5yZiEAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
