// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ContestInfo defines model for ContestInfo.
type ContestInfo struct {
	Description        *string    `json:"description,omitempty"`
	EndTime            *time.Time `json:"end_time,omitempty"`
	ScheduledStartTime *time.Time `json:"scheduled_start_time,omitempty"`
	StartTime          *time.Time `json:"start_time,omitempty"`
	Title              *string    `json:"title,omitempty"`
	VotingFreezeTime   *time.Time `json:"voting_freeze_time,omitempty"`
}

// ProblemInfo defines model for ProblemInfo.
type ProblemInfo struct {
	Description *string `json:"description,omitempty"`

	// 表示順の指定にも使用
	Id    int    `json:"id"`
	Title string `json:"title"`
}

// ProblemSolvedInfo defines model for ProblemSolvedInfo.
type ProblemSolvedInfo struct {
	ContestantId TraPId `json:"contestantId"`
	ProblemId    int    `json:"problemId"`
}

// ScoreInfo defines model for ScoreInfo.
type ScoreInfo struct {
	ContestantId TraPId  `json:"contestantId"`
	Score        float32 `json:"score"`
}

// TripleVote defines model for TripleVote.
type TripleVote struct {
	First  TraPId `json:"first"`
	Second TraPId `json:"second"`
	Third  TraPId `json:"third"`
}

// UserInfo defines model for UserInfo.
type UserInfo struct {
	IsAdmin bool   `json:"isAdmin"`
	IsRoot  bool   `json:"isRoot"`
	TraPId  TraPId `json:"traPId"`
}

// VoteStatsItem defines model for VoteStatsItem.
type VoteStatsItem struct {
	Contestant TraPId   `json:"contestant"`
	Voters     []TraPId `json:"voters"`
}

// TraPId defines model for traPId.
type TraPId = string

// PutContestInfoJSONBody defines parameters for PutContestInfo.
type PutContestInfoJSONBody = ContestInfo

// PutProblemsJSONBody defines parameters for PutProblems.
type PutProblemsJSONBody = []ProblemInfo

// UnmarkProblemAsSolvedJSONBody defines parameters for UnmarkProblemAsSolved.
type UnmarkProblemAsSolvedJSONBody = ProblemSolvedInfo

// MarkProblemAsSolvedJSONBody defines parameters for MarkProblemAsSolved.
type MarkProblemAsSolvedJSONBody = ProblemSolvedInfo

// PostScoreJSONBody defines parameters for PostScore.
type PostScoreJSONBody = ScoreInfo

// PutAdminUsersJSONBody defines parameters for PutAdminUsers.
type PutAdminUsersJSONBody = []TraPId

// PutContestantsJSONBody defines parameters for PutContestants.
type PutContestantsJSONBody = []TraPId

// GetContestantsJSONBody defines parameters for GetContestants.
type GetContestantsJSONBody = []TraPId

// PostVoteJSONBody defines parameters for PostVote.
type PostVoteJSONBody = TraPId

// PostVoteTripleJSONBody defines parameters for PostVoteTriple.
type PostVoteTripleJSONBody = TripleVote

// PutContestInfoJSONRequestBody defines body for PutContestInfo for application/json ContentType.
type PutContestInfoJSONRequestBody = PutContestInfoJSONBody

// PutProblemsJSONRequestBody defines body for PutProblems for application/json ContentType.
type PutProblemsJSONRequestBody = PutProblemsJSONBody

// UnmarkProblemAsSolvedJSONRequestBody defines body for UnmarkProblemAsSolved for application/json ContentType.
type UnmarkProblemAsSolvedJSONRequestBody = UnmarkProblemAsSolvedJSONBody

// MarkProblemAsSolvedJSONRequestBody defines body for MarkProblemAsSolved for application/json ContentType.
type MarkProblemAsSolvedJSONRequestBody = MarkProblemAsSolvedJSONBody

// PostScoreJSONRequestBody defines body for PostScore for application/json ContentType.
type PostScoreJSONRequestBody = PostScoreJSONBody

// PutAdminUsersJSONRequestBody defines body for PutAdminUsers for application/json ContentType.
type PutAdminUsersJSONRequestBody = PutAdminUsersJSONBody

// PutContestantsJSONRequestBody defines body for PutContestants for application/json ContentType.
type PutContestantsJSONRequestBody = PutContestantsJSONBody

// GetContestantsJSONRequestBody defines body for GetContestants for application/json ContentType.
type GetContestantsJSONRequestBody = GetContestantsJSONBody

// PostVoteJSONRequestBody defines body for PostVote for application/json ContentType.
type PostVoteJSONRequestBody = PostVoteJSONBody

// PostVoteTripleJSONRequestBody defines body for PostVoteTriple for application/json ContentType.
type PostVoteTripleJSONRequestBody = PostVoteTripleJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Put Contest Info
	// (PUT /admin/info)
	PutContestInfo(ctx echo.Context) error
	// Put Problems
	// (PUT /admin/problems)
	PutProblems(ctx echo.Context) error
	// Unmark Problem as Solved
	// (DELETE /admin/problems/solved)
	UnmarkProblemAsSolved(ctx echo.Context) error
	// Mark Problems as Solved
	// (POST /admin/problems/solved)
	MarkProblemAsSolved(ctx echo.Context) error
	// Post New Score
	// (POST /admin/scores)
	PostScore(ctx echo.Context) error
	// Put Admin Users
	// (PUT /admin/users/admin)
	PutAdminUsers(ctx echo.Context) error
	// Put Contestant Users
	// (PUT /admin/users/contestant)
	PutContestants(ctx echo.Context) error
	// Get Contest Info
	// (GET /info)
	GetContestInfo(ctx echo.Context) error
	// Get Admin Users
	// (GET /users/admin)
	GetAdmins(ctx echo.Context) error
	// Get Contestant Users
	// (GET /users/contestant)
	GetContestants(ctx echo.Context) error
	// Get My Information
	// (GET /users/me)
	GetMe(ctx echo.Context) error
	// Get Root Users
	// (GET /users/root)
	GetRootUsers(ctx echo.Context) error
	// Get Current Vote
	// (GET /vote)
	GetVote(ctx echo.Context) error
	// Post New Vote
	// (POST /vote)
	PostVote(ctx echo.Context) error
	// Your GET endpoint
	// (GET /vote/stats)
	GetVoteStats(ctx echo.Context) error

	// (GET /vote/triple)
	GetVoteTriple(ctx echo.Context) error

	// (POST /vote/triple)
	PostVoteTriple(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PutContestInfo converts echo context to params.
func (w *ServerInterfaceWrapper) PutContestInfo(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutContestInfo(ctx)
	return err
}

// PutProblems converts echo context to params.
func (w *ServerInterfaceWrapper) PutProblems(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutProblems(ctx)
	return err
}

// UnmarkProblemAsSolved converts echo context to params.
func (w *ServerInterfaceWrapper) UnmarkProblemAsSolved(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UnmarkProblemAsSolved(ctx)
	return err
}

// MarkProblemAsSolved converts echo context to params.
func (w *ServerInterfaceWrapper) MarkProblemAsSolved(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MarkProblemAsSolved(ctx)
	return err
}

// PostScore converts echo context to params.
func (w *ServerInterfaceWrapper) PostScore(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostScore(ctx)
	return err
}

// PutAdminUsers converts echo context to params.
func (w *ServerInterfaceWrapper) PutAdminUsers(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutAdminUsers(ctx)
	return err
}

// PutContestants converts echo context to params.
func (w *ServerInterfaceWrapper) PutContestants(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutContestants(ctx)
	return err
}

// GetContestInfo converts echo context to params.
func (w *ServerInterfaceWrapper) GetContestInfo(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetContestInfo(ctx)
	return err
}

// GetAdmins converts echo context to params.
func (w *ServerInterfaceWrapper) GetAdmins(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAdmins(ctx)
	return err
}

// GetContestants converts echo context to params.
func (w *ServerInterfaceWrapper) GetContestants(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetContestants(ctx)
	return err
}

// GetMe converts echo context to params.
func (w *ServerInterfaceWrapper) GetMe(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetMe(ctx)
	return err
}

// GetRootUsers converts echo context to params.
func (w *ServerInterfaceWrapper) GetRootUsers(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRootUsers(ctx)
	return err
}

// GetVote converts echo context to params.
func (w *ServerInterfaceWrapper) GetVote(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetVote(ctx)
	return err
}

// PostVote converts echo context to params.
func (w *ServerInterfaceWrapper) PostVote(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostVote(ctx)
	return err
}

// GetVoteStats converts echo context to params.
func (w *ServerInterfaceWrapper) GetVoteStats(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetVoteStats(ctx)
	return err
}

// GetVoteTriple converts echo context to params.
func (w *ServerInterfaceWrapper) GetVoteTriple(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetVoteTriple(ctx)
	return err
}

// PostVoteTriple converts echo context to params.
func (w *ServerInterfaceWrapper) PostVoteTriple(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostVoteTriple(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.PUT(baseURL+"/admin/info", wrapper.PutContestInfo)
	router.PUT(baseURL+"/admin/problems", wrapper.PutProblems)
	router.DELETE(baseURL+"/admin/problems/solved", wrapper.UnmarkProblemAsSolved)
	router.POST(baseURL+"/admin/problems/solved", wrapper.MarkProblemAsSolved)
	router.POST(baseURL+"/admin/scores", wrapper.PostScore)
	router.PUT(baseURL+"/admin/users/admin", wrapper.PutAdminUsers)
	router.PUT(baseURL+"/admin/users/contestant", wrapper.PutContestants)
	router.GET(baseURL+"/info", wrapper.GetContestInfo)
	router.GET(baseURL+"/users/admin", wrapper.GetAdmins)
	router.GET(baseURL+"/users/contestant", wrapper.GetContestants)
	router.GET(baseURL+"/users/me", wrapper.GetMe)
	router.GET(baseURL+"/users/root", wrapper.GetRootUsers)
	router.GET(baseURL+"/vote", wrapper.GetVote)
	router.POST(baseURL+"/vote", wrapper.PostVote)
	router.GET(baseURL+"/vote/stats", wrapper.GetVoteStats)
	router.GET(baseURL+"/vote/triple", wrapper.GetVoteTriple)
	router.POST(baseURL+"/vote/triple", wrapper.PostVoteTriple)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"MPODIiMAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
